services:
  - type: web
    name: nguyen-thanh-tai-blog
    env: python
    buildCommand: |
      # Install Python dependencies
      cd cms-backend
      pip install -r requirements.txt
      # Install Node.js dependencies and build React app
      cd ../cms-frontend
      npm install
      npm run build
      # Debug: List build output
      echo "=== Build output structure ==="
      ls -la build/
      ls -la build/static/
      # Copy built frontend to backend with explicit paths
      cd ../cms-backend
      rm -rf static templates manifest.json asset-manifest.json
      mkdir -p templates static/js static/css
      # Copy static files with absolute paths and error checking
      if [ -d "../cms-frontend/build/static" ]; then
        cp -r ../cms-frontend/build/static/* ./static/ || echo "Failed to copy static files"
      else
        echo "ERROR: build/static directory not found"
      fi
      
      if [ -f "../cms-frontend/build/index.html" ]; then
        cp ../cms-frontend/build/index.html ./templates/ || echo "Failed to copy index.html"
      else
        echo "ERROR: build/index.html not found"
      fi
      
      if [ -f "../cms-frontend/build/manifest.json" ]; then
        cp ../cms-frontend/build/manifest.json ./ || echo "Failed to copy manifest.json"
      fi
      
      if [ -f "../cms-frontend/build/asset-manifest.json" ]; then
        cp ../cms-frontend/build/asset-manifest.json ./ || echo "Failed to copy asset-manifest.json"
      fi
      # Debug: Verify files are copied
      echo "=== Copied files structure ==="
      ls -la static/
      ls -la static/js/ || echo "No js directory"
      ls -la static/css/ || echo "No css directory"
      ls -la templates/
    startCommand: |
      cd cms-backend
      echo "=== Production startup debug ==="
      pwd
      ls -la static/ || echo "No static directory"
      ls -la static/js/ || echo "No js directory" 
      ls -la static/css/ || echo "No css directory"
      ls -la templates/ || echo "No templates directory"
      echo "=== Starting gunicorn ==="
      gunicorn --bind 0.0.0.0:$PORT app_unified:app
    envVars:
      - key: FLASK_ENV
        value: production
      - key: FLASK_APP
        value: app_unified.py
      - key: JWT_SECRET_KEY
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: blog-database
          property: connectionString
    healthCheckPath: /
    regions:
      - oregon
    
databases:
  - name: blog-database
    databaseName: blog_cms
    user: blog_user